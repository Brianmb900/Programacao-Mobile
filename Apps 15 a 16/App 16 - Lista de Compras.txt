import { useEffect, useState } from "react";
import { View, Text, StatusBar, TextInput, Button, FlatList, TouchableOpacity } from "react-native";
import FontAwesome from 'react-native-vector-icons/FontAwesome';

import * as SQLite from 'expo-sqlite';

const db = SQLite.openDatabase("compras.db");

const App = () => {
  const [produto, setProduto] = useState("");
  const [quantidade, setQuantidade] = useState("");
  const [compras, setCompras] = useState([]);

  const createTables = () => {
    db.transaction(txn => {
      txn.executeSql(
        `CREATE TABLE IF NOT EXISTS compras (id INTEGER PRIMARY KEY AUTOINCREMENT, nome VARCHAR(20), quantidade INTEGER)`,
        [],
        (sqlTxn, res) => {
          console.log("Tabela criada com sucesso!");
        },
        error => {
          console.log("error on creating table " + error.message);
        },
      );
    });
  };

  const incluirProduto = () => {
    if (!produto) {
      alert("Informe um produto");
      return false;
    } else if (!quantidade) {
      alert("Informe a quantidade");
      return false;
    }
    db.transaction(txn => {
      txn.executeSql(
        `INSERT INTO compras (nome, quantidade) VALUES (?,?)`,
        [produto, quantidade],
        (sqlTxn, res) => {
          console.log(`${produto} Produto adicionada com sucesso!`);
          getProdutos();
          setProduto("");
          setQuantidade("");
        },
        error => {
          console.log("Erro ao inserir um Produto " + error.message);
        },
      );
    });
  };

const removerProduto = (id) => {
    db.transaction(txn => {
      txn.executeSql(
        `DELETE FROM compras WHERE id = ?`,
        [id],
        (sqlTxn, res) => {
          console.log(`${produto} Produto removido com sucesso!`);
          getProdutos();
        },
        error => {
          console.log("Erro ao remover um Produto " + error.message);
        },
      );
    });
  };

  const getProdutos = () => {
    db.transaction(txn => {
      txn.executeSql(
        `SELECT * FROM compras ORDER BY id DESC`,
        [],
        (sqlTxn, res) => {
          console.log("Produtos lidos com sucesso!");
          let len = res.rows.length;
          if (len >= 0) {
            let results = [];
            for (let i = 0; i < len; i++) {
              let item = res.rows.item(i);
              results.push({ id: item.id, nome: item.nome, quantidade: item.quantidade });
            }
            setCompras(results);
          }
        },
        error => {
          console.log("Erro ao obter Produtos " + error.message);
        },
      );
    });
  };

  const renderProdutos = ({ item }) => {
    return (
      <View style={{
        flexDirection: "row",
        paddingVertical: 12,
        paddingHorizontal: 10,
        borderBottomWidth: 1,
        borderColor: "#ddd",
        justifyContent:"space-between"
      }}>
        <View style={{flexDirection:"row"}}>
          <Text style={{ marginRight: 9 }}>{item.nome}</Text>
          <Text> ({item.id})</Text>
        </View>
          <TouchableOpacity onPress={() => removerProduto(item.id)}>
            <FontAwesome name='minus' size={23} color='black' />
          </TouchableOpacity>
      </View>
    );
  };


  useEffect(async () => {
    await createTables();
    await getProdutos();
  }, []);


  return (
    <View>
      <StatusBar backgroundColor="#222" />
      <Text style={{borderBottomWidth: 1, marginTop: 30, textAlign: "center", fontSize:22}}>Compras</Text>
      <View style={{flexDirection:"row", justifyContent:"space-between", borderBottomWidth: 1}}>
        <TextInput
          placeholder="Quantidade "
          keyboardType="number-pad"
          value={quantidade}
          onChangeText={setQuantidade}
          style={{ marginHorizontal: 4, borderRightWidth: 1}}
        />
        <TextInput
          placeholder="Informe um Produto"
          value={produto}
          onChangeText={setProduto}
        />
        <View style={{borderLeftWidth: 1}}>
          <TouchableOpacity onPress={incluirProduto}>
            <FontAwesome style={{}} name='plus' size={33} color='black'/>
          </TouchableOpacity>
        </View>
      </View>
      <FlatList
        data={compras}
        renderItem={renderProdutos}
        key={t => t.id}
      />
    </View>
  );
};


export default App;